// Package openapi_server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package openapi_server

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// Instance defines model for Instance.
type Instance struct {
	Host  *string `json:"host,omitempty"`
	Name  *string `json:"name,omitempty"`
	Ports *[]struct {
		Label      *string `json:"label,omitempty"`
		Message    *string `json:"message,omitempty"`
		Port       *int    `json:"port,omitempty"`
		RemotePort *int    `json:"remote_port,omitempty"`
	} `json:"ports,omitempty"`
	SshPort *int    `json:"ssh_port,omitempty"`
	Status  *string `json:"status,omitempty"`
	User    *string `json:"user,omitempty"`
}

// PostSpacesUserJSONBody defines parameters for PostSpacesUser.
type PostSpacesUserJSONBody struct {
	// The docker image to use
	Image *string `json:"image,omitempty"`

	// Instance Name
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
	Pubkey   *string `json:"pubkey,omitempty"`
	User     *string `json:"user,omitempty"`
}

// PostSpacesUserJSONRequestBody defines body for PostSpacesUser for application/json ContentType.
type PostSpacesUserJSONRequestBody PostSpacesUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)

	// (GET /spaces/{user})
	GetSpacesUser(w http.ResponseWriter, r *http.Request, user string)

	// (POST /spaces/{user})
	PostSpacesUser(w http.ResponseWriter, r *http.Request, user string)

	// (DELETE /spaces/{user}/{name})
	DeleteSpacesUserName(w http.ResponseWriter, r *http.Request, user string, name string)

	// (GET /spaces/{user}/{name})
	GetSpacesUserName(w http.ResponseWriter, r *http.Request, user string, name string)

	// (POST /spaces/{user}/{name}/restart)
	PostSpacesUserNameRestart(w http.ResponseWriter, r *http.Request, user string, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSpacesUser operation middleware
func (siw *ServerInterfaceWrapper) GetSpacesUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", chi.URLParam(r, "user"), &user)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSpacesUser(w, r, user)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostSpacesUser operation middleware
func (siw *ServerInterfaceWrapper) PostSpacesUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", chi.URLParam(r, "user"), &user)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSpacesUser(w, r, user)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteSpacesUserName operation middleware
func (siw *ServerInterfaceWrapper) DeleteSpacesUserName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", chi.URLParam(r, "user"), &user)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSpacesUserName(w, r, user, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSpacesUserName operation middleware
func (siw *ServerInterfaceWrapper) GetSpacesUserName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", chi.URLParam(r, "user"), &user)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSpacesUserName(w, r, user, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostSpacesUserNameRestart operation middleware
func (siw *ServerInterfaceWrapper) PostSpacesUserNameRestart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", chi.URLParam(r, "user"), &user)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSpacesUserNameRestart(w, r, user, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/spaces/{user}", wrapper.GetSpacesUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/spaces/{user}", wrapper.PostSpacesUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/spaces/{user}/{name}", wrapper.DeleteSpacesUserName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/spaces/{user}/{name}", wrapper.GetSpacesUserName)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/spaces/{user}/{name}/restart", wrapper.PostSpacesUserNameRestart)
	})

	return r
}
