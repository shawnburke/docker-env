#! /bin/bash

tag=docker-env-server:local
args=""

# Flags
# -r restart existing container
# -d run as daemon
# -f follow logs

while getopts ":hrdf" opt; do
  case ${opt} in
    d ) args="-d"
      daemon=1
	echo "setting daemon mode..."
      ;;
    r) rebuild=1
      ;;
    f) follow=1
      ;;
    h) echo "Usage: start [-h] [-r (rebuild)] [-d (daemon)] [container name default=docker-env-server]"
            exit 0
      ;;
  esac
done

if ! docker inspect $tag 2>&1 >/dev/null
then
    rebuild=1
fi

[[ -n "$rebuild" ]] && make -e "TAG=$tag" docker-build


container_name=${@:$OPTIND:1}
[[ -z "$container_name" ]] && container_name=docker-env-server

echo "Name: $container_name"

if docker rm -f $container_name
then
  echo "Removed old container"
fi

if [ -n "$DNS_SEARCH" ]
then
  echo "Search: $DNS_SEARCH"
  args="$args -e DNS_SEARCH=$DNS_SEARCH"
fi

if [ -n "$DNS_NAMESERVERS" ]
then
  echo "Nameservers: $DNS_NAMESERVERS"
  args="$args -e DNS_NAMESERVERS=$DNS_NAMESERVERS "
fi


config=
if [ -f docker-env.yaml ]
then
  config="-v $(pwd)/docker-env.yaml:/app/docker-env.yaml"
fi

# Note this runs on host netwolsrk
docker run  $args --name "$container_name" --restart="unless-stopped" -e "PORT=3001" $args --network=host -v "/var/run/docker.sock:/var/run/docker.sock" -v "$(pwd)/../.cache/:/data" $config docker-env-server:local

if [[ -n "$daemon" && -n "$follow" ]]
then
  echo "Tailing logs, you can quit this..."
  docker logs -f $container_name
fi

